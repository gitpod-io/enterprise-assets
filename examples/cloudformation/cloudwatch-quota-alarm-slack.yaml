AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudWatch alarms for AWS Service Quotas monitoring"

Parameters:
  RDSQuotaThreshold:
    Type: Number
    Description: "Threshold percentage for RDS quota utilization"
    Default: 80
    MinValue: 1
    MaxValue: 100
  ELBQuotaThreshold:
    Type: Number
    Description: "Threshold percentage for ELB quota utilization"
    Default: 80
    MinValue: 1
    MaxValue: 100
  DynamoDBQuotaThreshold:
    Type: Number
    Description: "Threshold percentage for DynamoDB quota utilization"
    Default: 80
    MinValue: 1
    MaxValue: 100
  ASGQuotaThreshold:
    Type: Number
    Description: "Threshold percentage for Auto Scaling Groups quota utilization"
    Default: 80
    MinValue: 1
    MaxValue: 100
  FirehoseQuotaThreshold:
    Type: Number
    Description: "Threshold percentage for Firehose quota utilization"
    Default: 80
    MinValue: 1
    MaxValue: 100
  ECRQuotaThreshold:
    Type: Number
    Description: "Absolute threshold for ECR quota utilization"
    Default: 80
    MinValue: 1
    MaxValue: 100
  EC2QuotaThreshold:
    Type: Number
    Description: "Threshold percentage for EC2 quota utilization"
    Default: 80
    MinValue: 1
    MaxValue: 100

  SlackWorkspaceId:
    Type: String
    Description: "Slack workspace ID"
  SlackChannelId:
    Type: String
    Description: "Slack channel ID"

Resources:
  QuotaAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "AWS Service Quotas Alerts"
      TopicName: "service-quotas-alerts"

  QuotaAlertsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sns:Publish
            Resource: !Ref QuotaAlertsTopic
      Topics:
        - !Ref QuotaAlertsTopic

  SlackChannelConfiguration:
    Type: AWS::Chatbot::SlackChannelConfiguration
    Properties:
      ConfigurationName: !Sub "${AWS::StackName}-${AWS::Region}-quota-alerts"
      IamRoleArn: !GetAtt ChatbotRole.Arn
      SlackWorkspaceId: !Ref SlackWorkspaceId
      SlackChannelId: !Ref SlackChannelId
      GuardrailPolicies:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      SnsTopicArns:
        - !Ref QuotaAlertsTopic
      LoggingLevel: ERROR

  QuotaAlarmsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/quota-alarms/${AWS::StackName}"
      RetentionInDays: 7

  QuotaAlarmsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt QuotaAlarmsRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const message = event.Records[0].Sns.Message;
              console.log('Quota Alarm:', message);
              return message;
          };
      Runtime: nodejs22.x
      Timeout: 30
      Environment:
        Variables:
          LOG_LEVEL: INFO

  QuotaAlarmsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  QuotaAlarmsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref QuotaAlarmsFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref QuotaAlertsTopic

  QuotaAlarmsFunctionSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref QuotaAlertsTopic
      Endpoint: !GetAtt QuotaAlarmsFunction.Arn

  RDSInstancesQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-rds-instances-quota"
      AlarmDescription: !Sub "Alarm when RDS instances quota utilization exceeds ${RDSQuotaThreshold}%"
      MetricName: "ResourceCount"
      Namespace: "AWS/Usage"
      Dimensions:
        - Name: "Service"
          Value: "RDS"
        - Name: "Type"
          Value: "Resource"
        - Name: "Resource"
          Value: "DBInstances"
        - Name: "Class"
          Value: "None"
      Statistic: "Maximum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref RDSQuotaThreshold
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - !Ref QuotaAlertsTopic

  RDSStorageQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-rds-storage-quota"
      AlarmDescription: !Sub "Alarm when RDS allocated storage exceeds ${RDSQuotaThreshold}%"
      MetricName: "ResourceCount"
      Namespace: "AWS/Usage"
      Dimensions:
        - Name: "Service"
          Value: "RDS"
        - Name: "Type"
          Value: "Resource"
        - Name: "Resource"
          Value: "AllocatedStorage"
        - Name: "Class"
          Value: "None"
      Statistic: "Maximum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref RDSQuotaThreshold
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - !Ref QuotaAlertsTopic

  ELBListenersPerNetworkQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-elb-listeners-quota"
      AlarmDescription: !Sub "Alarm when ELB listeners per network exceeds ${ELBQuotaThreshold}%"
      ActionsEnabled: true
      AlarmActions:
        - !Ref QuotaAlertsTopic
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !Ref ELBQuotaThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Metrics:
        - Id: usage_data
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Usage
              MetricName: ResourceCount
              Dimensions:
                - Name: Class
                  Value: None
                - Name: Resource
                  Value: ListenersPerNetworkLoadBalancer
                - Name: Service
                  Value: Elastic Load Balancing
                - Name: Type
                  Value: Resource
            Period: 300
            Stat: Maximum
        - Id: pct_utilization
          Label: "% Utilization"
          ReturnData: true
          Expression: (usage_data/SERVICE_QUOTA(usage_data))*100

  ELBTargetGroupsQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-elb-target-groups-quota"
      AlarmDescription: !Sub "Alarm when ELB target groups per region exceeds ${ELBQuotaThreshold}%"
      ActionsEnabled: true
      AlarmActions:
        - !Ref QuotaAlertsTopic
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !Ref ELBQuotaThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Metrics:
        - Id: usage_data
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Usage
              MetricName: ResourceCount
              Dimensions:
                - Name: Class
                  Value: None
                - Name: Resource
                  Value: TargetGroupsPerRegion
                - Name: Service
                  Value: Elastic Load Balancing
                - Name: Type
                  Value: Resource
            Period: 300
            Stat: Maximum
        - Id: pct_utilization
          Label: "% Utilization"
          ReturnData: true
          Expression: (usage_data/SERVICE_QUOTA(usage_data))*100

  DynamoDBTableQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-dynamodb-tables-quota"
      AlarmDescription: !Sub "Alarm when DynamoDB table count exceeds ${DynamoDBQuotaThreshold}%"
      MetricName: "ResourceCount"
      Namespace: "AWS/Usage"
      Dimensions:
        - Name: "Service"
          Value: "DynamoDB"
        - Name: "Type"
          Value: "Resource"
        - Name: "Resource"
          Value: "TableCount"
        - Name: "Class"
          Value: "None"
      Statistic: "Maximum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref DynamoDBQuotaThreshold
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - !Ref QuotaAlertsTopic

  AutoScalingGroupsQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-asg-quota"
      AlarmDescription: !Sub "Alarm when Auto Scaling Groups count exceeds ${ASGQuotaThreshold}%"
      ActionsEnabled: true
      AlarmActions:
        - !Ref QuotaAlertsTopic
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !Ref ASGQuotaThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Metrics:
        - Id: usage_data
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Usage
              MetricName: ResourceCount
              Dimensions:
                - Name: Class
                  Value: None
                - Name: Resource
                  Value: NumberOfAutoScalingGroup
                - Name: Service
                  Value: AutoScaling
                - Name: Type
                  Value: Resource
            Period: 300
            Stat: Maximum
        - Id: pct_utilization
          Label: "% Utilization"
          ReturnData: true
          Expression: (usage_data/SERVICE_QUOTA(usage_data))*100

  FirehoseStreamsQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-firehose-streams-quota"
      AlarmDescription: !Sub "Alarm when Firehose delivery streams count exceeds ${FirehoseQuotaThreshold}%"
      ActionsEnabled: true
      AlarmActions:
        - !Ref QuotaAlertsTopic
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !Ref FirehoseQuotaThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Metrics:
        - Id: usage_data
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Usage
              MetricName: ResourceCount
              Dimensions:
                - Name: Class
                  Value: None
                - Name: Resource
                  Value: DeliveryStreams
                - Name: Service
                  Value: Firehose
                - Name: Type
                  Value: Resource
            Period: 300
            Stat: Maximum
        - Id: pct_utilization
          Label: "% Utilization"
          ReturnData: true
          Expression: (usage_data/SERVICE_QUOTA(usage_data))*100

  EC2vCPUQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ec2-vcpu-utilization"
      AlarmDescription: !Sub "Alarm when EC2 vCPU utilization exceeds ${EC2QuotaThreshold}%"
      ActionsEnabled: true
      AlarmActions:
        - !Ref QuotaAlertsTopic
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: !Ref EC2QuotaThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Metrics:
        - Id: usage_data
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/Usage
              MetricName: ResourceCount
              Dimensions:
                - Name: Class
                  Value: Standard/OnDemand
                - Name: Resource
                  Value: vCPU
                - Name: Service
                  Value: EC2
                - Name: Type
                  Value: Resource
            Period: 300
            Stat: Maximum
        - Id: pct_utilization
          Label: "% Utilization"
          ReturnData: true
          Expression: "(usage_data/SERVICE_QUOTA(usage_data))*100"
  EC2GP3StorageQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ec2-gp3-storage-quota"
      AlarmDescription: !Sub "Alarm when EC2 GP3 storage utilization exceeds ${EC2QuotaThreshold}%"
      MetricName: "ResourceCount"
      Namespace: "AWS/Usage"
      Dimensions:
        - Name: "Service"
          Value: "EC2"
        - Name: "Type"
          Value: "Resource"
        - Name: "Resource"
          Value: "GP3Volume"
        - Name: "Class"
          Value: "None"
      Statistic: "Maximum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref EC2QuotaThreshold
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - !Ref QuotaAlertsTopic
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:DescribeRepositories
                  - ecr:DescribeImages
                  - ecr:DescribeRegistry
                Resource: '*'
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  MonitoringFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          from datetime import datetime

          def lambda_handler(event, context):
              # Initialize boto3 clients
              ecr_client = boto3.client('ecr', region_name='eu-central-1')
              cloudwatch_client = boto3.client('cloudwatch', region_name='eu-central-1')
              
              try:
                  # Default ECR quota
                  DEFAULT_QUOTA = 10000
                  image_quota = DEFAULT_QUOTA
                  
                  try:
                      registry_info = ecr_client.describe_registry()
                      if 'registryPolicy' in registry_info:
                          policy = registry_info['registryPolicy']
                          if 'rules' in policy and len(policy['rules']) > 0:
                              quota = policy['rules'][0].get('maximumImagesPerRepository')
                              if quota:
                                  image_quota = quota
                  except Exception as e:
                      print(f"Using default quota. Error getting registry info: {str(e)}")
                  
                  print(f"Using image quota: {image_quota}")
                  
                  # Get list of all repositories
                  repositories = ecr_client.describe_repositories()['repositories']
                  max_images = 0
                  
                  # Find maximum image count across repositories
                  for repo in repositories:
                      images = ecr_client.describe_images(
                          repositoryName=repo['repositoryName'],
                          maxResults=1000
                      )
                      max_images = max(max_images, len(images['imageDetails']))
                  
                  # Calculate utilization percentage
                  utilization_percent = (max_images / image_quota) * 100
                  
                  # Log metrics
                  cloudwatch_client.put_metric_data(
                      Namespace='AWS/ECR',
                      MetricData=[
                          {
                              'MetricName': 'MaxImagesPerRepository',
                              'Value': max_images,
                              'Unit': 'Count',
                              'Timestamp': datetime.utcnow()
                          },
                          {
                              'MetricName': 'RepositoryQuota',
                              'Value': image_quota,
                              'Unit': 'Count',
                              'Timestamp': datetime.utcnow()
                          },
                          {
                              'MetricName': 'QuotaUtilization',
                              'Value': utilization_percent,
                              'Unit': 'Percent',
                              'Timestamp': datetime.utcnow()
                          }
                      ]
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': f'Maximum image count: {max_images}, Utilization: {utilization_percent:.1f}%'
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  raise e
      Runtime: python3.9
      Timeout: 60
      MemorySize: 128
  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Schedule for ECR Repository Monitor Lambda"
      ScheduleExpression: "rate(30 minutes)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt MonitoringFunction.Arn
          Id: "MonitoringFunctionTarget"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MonitoringFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduleRule.Arn

  ECRImagesQuotaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ecr-images-quota"
      AlarmDescription: !Sub "Alarm when ECR repository image count exceeds ${ECRQuotaThreshold}% of quota"
      MetricName: "QuotaUtilization"
      Namespace: "AWS/ECR"
      Statistic: "Maximum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ECRQuotaThreshold
      ComparisonOperator: "GreaterThanThreshold"
      AlarmActions:
        - !Ref QuotaAlertsTopic

  ChatbotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: chatbot.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyName: ChatbotSNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:GetTopicAttributes
                  - sns:ListSubscriptionsByTopic
                  - sns:Subscribe
                Resource: !Ref QuotaAlertsTopic

Outputs:
  SNSTopicARN:
    Description: "ARN of the SNS topic"
    Value: !Ref QuotaAlertsTopic
  LogGroupName:
    Description: "Name of the CloudWatch Log Group for alerts"
    Value: !Ref QuotaAlarmsLogGroup
